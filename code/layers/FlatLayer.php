<?php

/**
 * @author marcus
 */
class FlatLayer extends ViewableData
{
    protected $name;
    protected $config = array();
    private static $virtual_db = array(
        'Title' => 'Varchar(255)',
    );
    private static $virtual_layers = array();
    private static $virtual_has_one = array();
    private static $virtual_many_many = array();

    public function __construct($name)
    {
        $this->name = $name;
        parent::__construct();
    }

    public function getName()
    {
        return $this->name;
    }

    public function db($fieldName = null)
    {
        return LayerManager::layer_db(get_class($this), $this->name, $fieldName);
    }

    public function has_one($component = null)
    {
        $spec = LayerManager::layer_relationships(get_class($this), $this->name);
        $rels = $spec['has_one'];

        if ($component && isset($rels[$component])) {
            return $rels[$component];
        }
        return $rels;
    }

    public function many_many($component = null) {
        $spec = LayerManager::layer_relationships(get_class($this), $this->name);
        $rels = $spec['many_many'];

        if ($component && isset($rels[$component])) {
            return $rels[$component];
        }
        return $rels;
    }

    public function setConfig($name, $value)
    {
        $this->config[$name] = $value;
    }

    public function getConfig($name, $default = null)
    {
        if (isset($this->config[$name])) {
            return $this->config[$name];
        }
        return $default;
    }

    public function getCMSFields()
    {
        $scaffolder = FormScaffolder::create($this);
        return $scaffolder->getFieldList();
    }

    /**
     * Return the DBField object that represents the given field.
     * This works similarly to obj() with 2 key differences:
     *   - it still returns an object even when the field has no value.
     *   - it only matches fields and not methods
     *   - it matches foreign keys generated by has_one relationships, eg, "ParentID"
     *
     * @param string $fieldName Name of the field
     * @return DBField The field as a DBField object
     */
    public function dbObject($fieldName)
    {
        if ($helper = $this->db($fieldName)) {
            $obj = Object::create_from_string($helper, $fieldName);
            $obj->setValue($this->$fieldName, $this->record, false);
            return $obj;

            // Special case for has_one relationships
        } else if (preg_match('/ID$/', $fieldName) && $this->has_one(substr($fieldName, 0, -2))) {
            $val = $this->$fieldName;
            return DBField::create_field('ForeignKey', $val, $fieldName, $this);
        }
    }

    public function fieldLabel($field)
    {
        return $field;
    }
}